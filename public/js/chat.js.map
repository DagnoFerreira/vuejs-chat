{"version":3,"sources":["chat.js"],"names":[],"mappings":"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","file":"chat.js","sourcesContent":["'use strict';\n\ndefine(['vuejs', 'socket.io-client', 'momentjs'], function () {\n\n  const Vue = require('vuejs'),\n    moment = require('momentjs'),\n    io = require('socket.io-client');\n\n  // SocketIO setup\n  const socket = io();\n  var connected = true;\n\n  function cleanInput (input) {\n    // todo: make this work\n    return input;\n    //return $('<div/>').text(input).text();\n  }\n\n  // Vue\n  var data = {\n    messages: [],\n    users: [],\n    chatText: '',\n    channel: 'public'\n  };\n\n  function addUser(user) {\n    data.users.push(user);\n  }\n\n  function removeUser(_uid) {\n    data.users = data.users.filter((user) => { return user._uid !== _uid; });\n  }\n\n  function addMessage(message) {\n    data.messages.push(message);\n  }\n\n  Vue.filter('formatMessageDate', (value) => {\n    return moment(value).format('h:mm A');\n  });\n\n  function isNotSubsequentMessage(currentMessage, index) {\n    let previousMessage = data.messages[index - 1];\n    if (!previousMessage) return true;\n    return previousMessage.username !== currentMessage.username;\n  }\n\n  Vue.filter('isNotSubsequentMessage', isNotSubsequentMessage);\n\n  Vue.filter('getMessageClass', (currentMessage, index) => {\n    if (isNotSubsequentMessage(currentMessage, index) && index !== 0) {\n      return 'message-top-padding';\n    } else {\n      return '';\n    }\n  });\n\n  Vue.transition('messageAdded', {\n    css: false,\n    enter: function (el, done) {\n      var messageList = document.getElementById('message-list');\n      messageList.scrollTop = messageList.scrollHeight;\n      done();\n    },\n\n  });\n\n  let username = 'george'.concat(Math.floor((Math.random() * 100)))\n    , avatar = 'http://www.picgifs.com/avatars/celebrities/nicolas-cage/avatars-nicolas-cage-621219.jpg'\n    , _uid = Math.floor((Math.random() * 10000))\n    ;\n\n  function countUnreadMessages(channel) {\n    let count = 0;\n    data.messages.forEach((message) => {\n      if (message.channel === channel) {\n        count++;\n      }\n    });\n    return count;\n  }\n\n  new Vue({\n    el: '#chat',\n    data: data,\n    computed: {\n      filteredMessages: function() {\n        return this.messages.filter((message) => { return message.channel === this.channel; });\n      },\n      channels: function() {\n        return this.users.map((user) => {\n          user.isYou = (user._uid === _uid);\n          //user.unreadMessages = 0;\n          user.unreadMessages = countUnreadMessages(this.channel);\n          if (this.channel !== user.username) {\n            user.unreadMessages = countUnreadMessages(this.channel);\n          }\n          return user;\n        });\n      }\n    },\n    methods: {\n      changeChannel(user) {\n        this.channel = user;\n      },\n      submitChat() {\n        var chatText = cleanInput(this.chatText);\n        if (chatText && connected) {\n          this.chatText = '';\n          let message = {\n            username,\n            message: chatText,\n            date: Date.now(),\n            isServerMessage: false,\n            channel: this.channel,\n            avatar\n          };\n          addMessage(message);\n          socket.emit('chatTextClientToServer', message);\n        }\n      }\n    }\n  });\n\n  // Add this user on page load\n  (function() {\n    let user = {\n      username,\n      _uid,\n      avatar\n    };\n    socket.emit('userJoinedClientToServer', user);\n    addUser(user);\n  })();\n\n  socket.on('userJoinedServerToClient', (obj) => {\n    addUser(obj);\n    addMessage({\n      username: obj.username,\n      avatar: obj.avatar,\n      message: 'has joined.',\n      isServerMessage: true,\n      channel: 'public',\n      unread: true\n    });\n  });\n\n  socket.on('userLeftServerToClient', (obj) => {\n    removeUser(obj._uid);\n  });\n\n  socket.on('chatTextServerToClient', (message) => {\n    addMessage(message);\n  });\n\n});\n"],"sourceRoot":"/source/"}